<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->  
		<property name="securityManager" ref="securityManager" />
		<!-- 登录页面(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 --> 
		<property name="loginUrl" value="/login.jsp" />
		<!-- 登录后跳转到业务页面 -->
		<property name="successUrl" value="/sys/index" />
		<!-- 错误页面 -->
		<property name="unauthorizedUrl" value="/jsp/unauthorized.jsp" />
		
		<!-- 具体配置需要拦截哪些 URL, 以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦截. -->
		<!-- 此处可配合这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
		<property name="filterChainDefinitions">
			<value>
				/sys/**=authc
				/appsite/phoneUser/**=androidUserFilter
				/appsys/**=androidUserFilter

				<!-- WEB 网站过滤 -->
				/web/user/**=appSiteFilter 
				/web/shopcar/**=appSiteFilter
				/web/user/**=appSiteFilter
				<!-- /xczx_index.jsp=anon
				/jsp/success.jsp=anon
				/jsp/fail.jsp=anon
				/jsp/user.jsp = roles[user]
				/user/ = roles[admin]
				/logout = logout -->
			</value>
		</property>
	</bean>

	<!-- 自定义Realm-->
	<bean id="cenRealm" class="com.cen.upms.shiro.CenRealm">
		<!-- 自定义 cache
       <property name="authorizationCacheName" value="cen_realm_authorization_cache" />   -->  
	</bean>

	<!-- 配置缓存管理器 ehcache -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> 
		<!-- 指定 ehcache 的配置文件 -->
		<property name="cacheManagerConfigFile" value="classpath:conf/ehcache.xml" />
	</bean>

	<!-- Shiro默认会使用Servlet容器的Session,这里使用的是Shiro原生Session-->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- session的失效时长，单位毫秒 -->
		<property name="globalSessionTimeout" value="3600000" />
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true" />

		<property name="sessionIdCookieEnabled" value="true"/>
		<property name="sessionIdCookie" ref="simpleCookie"/>
	</bean>

	<bean id="simpleCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg name="name" value="shiro.sesssion"/>
		<property name="path" value="/"/>
	</bean>

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 缓存管理器 -->
		<property name="cacheManager" ref="cacheManager" />
		<!-- 我们自定义的realm -->
		<property name="realm" ref="cenRealm" />
		<!-- <property name="sessionMode" value="native" /> -->
		<!-- 会话管理 -->
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- 配置 Bean 后置处理器: 会自动的调用和 Spring 整合后各个组件的生命周期方法. -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- AOP式方法级权限检查  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>

	<!-- 定义扩展的filter实例 -->
	<bean id="androidUserFilter" class="com.cen.ucenter.filter.AndroidUserFilter" />
	<bean id="appSiteFilter" class="com.cen.ucenter.filter.AppSiteFilter" />

</beans> 

