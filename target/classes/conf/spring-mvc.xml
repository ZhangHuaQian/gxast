<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="  
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd  
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 扫描 控制层 -->
	<!-- 它背后注册了很多用于解析注解的处理器,其中就包括<context:annotation-config/>配置的注解所使用的处理器 -->  
	<!-- 所以配置了<context:component-scan base-package="">之后,便无需再配置<context:annotation-config> -->  
	<context:component-scan base-package="com.cen.**.controller" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 上传文件配置 500*1024*1024即500M resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常   -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="524288000"/>
		<property name="maxInMemorySize" value="10240"/>
		<property name="defaultEncoding" value="UTF-8"/>
		<property name="resolveLazily" value="true"/>
	</bean> 
	
	<!-- 处理请求返回json字符串的中文乱码问题 -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven> 
	
	<!-- 启用SpringMVC的注解功能,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 -->  
	<mvc:annotation-driven/>  
	<!-- 接口跨域配置 -->  
	<mvc:cors>  
		<mvc:mapping path="/*"  
			allowed-origins="*"  
			allowed-methods="POST, GET, OPTIONS, DELETE, PUT"  
			allowed-headers="Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With, cen_xczhapp_token"  
			allow-credentials="true" />  
	</mvc:cors>
	<!-- 配置SpringMVC的视图解析器 --> 
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!--识别切面，开启CGLIB动态代理  --> 
	<aop:aspectj-autoproxy proxy-target-class="true"/>   
	
	
	<!-- 配置拦截器  开始-->
	<!-- <mvc:exclude-mapping path="/"/> 拦截--> 
	<!-- <mvc:exclude-mapping path="/loginpage/**"/> 排除拦截 
		 <mvc:interceptors>
			<mvc:interceptor>-->
	<!-- 拦截器拦截的URL格式  
		<mvc:mapping path="/mydemo/*" />
		<mvc:exclude-mapping path="/mydemo/logout.do" /> -->
	<!-- 处理拦截的具体实现类  
				<bean class="com.ssm.interceptor.LoginInterceptor" />
			</mvc:interceptor> 
		</mvc:interceptors>  -->
	
	<!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响 -->  
	<!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/js/**"的资源，都会从"/resources/js/"里面进行查找 -->  
	<!-- 我们可以访问http://IP:8080/xxx/js/my.css和http://IP:8080/xxx/resources/js/my.css对比出来   -->
	<mvc:resources mapping="/resource/**" location="/resource/"/>
	<mvc:resources mapping="/uploadFiles/**" location="/uploadFiles/"/>
	<mvc:resources mapping="/favicon.ico" location="/"/>
	<mvc:resources mapping="/app/**" location="/app/"/>
	<mvc:resources mapping="/*.txt" location="/"/>
	<mvc:resources mapping="/*.html" location="/"/>
	<!-- 配置拦截器  结束-->


	<!-- 在springMVC配置文件配置当一个请求找不到处理器时将会把它交给容器本身处理 -->
	<!-- 解决url访问.html文件时报 404 -->
	<mvc:default-servlet-handler />

	<import resource="ApplicationContext-profile.xml" />

</beans>   